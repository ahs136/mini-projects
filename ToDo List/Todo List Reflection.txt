This project took me 2-3 hours and expanded upon what I learned in my toggle theme project by designing the webpage with HTML and CSS, but required much more proficiency in JavaScript. I did struggle at first with centering objects on my webpage, but eventually I got the hang of it, using span to create the delete button and offsetting it from the right and top end. Through this project, I gained a solid understanding of dynamic DOM manipulation and event handling. Initially, I worked with direct event listeners attached to individual elements, such as the delete buttons for each list item. However, I soon recognized the limitations of this approach, especially as new list items were dynamically added. I faced issues initially by not being careful with my syntax. When omitting the “All” when using querySelector I would sometimes end up only selecting the first list item and would fruitlessly edit my logic. Once I caught the issue, I commented out my previous method and made sure to include constant values such as list items inside of my event listeners. By refactoring my code to use event delegation (attaching a single event listener to the parent list element), I improved the efficiency and scalability of my code, ensuring that the delete functionality worked seamlessly for both existing and newly created items. This was a key step in making my code more maintainable and performant.


Additionally, I developed a search filter that updates the visible list items as the user types. From a previous JavaScript tutorial, I knew the importance of converting strings to lower/uppercase before comparing them. I experimented with different string matching methods, initially using .includes() but then refining it to .startsWith() to precisely match the strings rather than simply looking for included characters. I also learned the importance of retrieving the modified list of items within the event listener callback to accommodate dynamic changes, such as adding or deleting todos. Overall, this process deepened my understanding of how to manipulate the DOM efficiently, handle events dynamically, and create responsive, user-friendly interfaces.